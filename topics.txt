immutable
how to create such class
comparable comparator
executor
composition
threads
generics
collections
reflection
design patterns

1st :
count no of occurances of ch in a word - which DS to use and complexity
find second largest number in an array and complexity
why rest is stateless.can we not save cookies and sessions etc
design patterns u have used?
how can u implement hashmap 

Learning:
- Need to update resume and study about each. make cheatsheet for all
- hands on on java common questions
- complexity
- data structures
- left view of binary tree
- 


=============
https://www.interviewbit.com/courses/programming/

Time Complexity
Arrays
Math
Binary Search 
Strings
Bit Manipulation
Two Pointers
Linked Lists
Stacks and Quesues
Backtracking
Hashing
Heaps and Maps
tree data Structure
Dynamic Programming
Greedy Algorithm
Graph
Code Ninja

System Design
Scripting
Database
Puzzles


After all this --> careermonk
journal dev
Udemy
and other links and notes which are useful

oauth saml etc

design patterns

https://www.geeksforgeeks.org/
https://github.com/

https://github.com/skabuhuraira/samples.git


1. Setup Git in laptop and mac with eclipse
http://www.eclipsesource.com/blogs/tutorials/egit-tutorial/
http://www.geo.uzh.ch/microsite/reproducible_research/post/rr-eclipse-git/
https://www.vogella.com/tutorials/EclipseGit/article.html#github_push


https://blog.osteele.com/2008/05/my-git-workflow/ 




https://product.hubspot.com/blog/git-and-github-tutorial-for-beginners

Prepare folders and notes for:
- java
- Git
- Design Patterns
- Networking
- ant and maven
- rest and soap


Design Principles - Head First:

1. Strategy pattern  (Duck Problem): Defines a family of algorithms, encapsulates eacj one and makes them interchangeable. Strategy lets the algorithm vary independently from clients that use it.

- Favor composition over inheritence
- Program to an interface, not an implementation
- Identify aspects of application that vary and separate them from what stays the same

2. Observer Pattern : Defines a 1-to-many dependency b/w objects so that when one object changes state, all of its dependents are notified and updated automatically

Publishers+Subscribers of newpaper = Observer pattern
Publishers = Subject
Subscribers = Observers

- provides an object design where subjects and observers are loosely coupled.
- strive for loosely coupled designs between objects that interact
- Oberserver and Observable classes in Java - real life examples

start from page 61

3. Decorator
- starbuzz coffee
- decorator classes
- real life: File Input Stream --> Buffered Input STream --> LineNumberInputStream Classes (remember the diagram - page 103)

** Designs should be open for extension and closed for modification


4. Factory
- cases when there are multiple types of objects which can be created
- example : Pizza - Cheese Pizza, veggie Delight etc. Operations are same --> bake, topings, cut, pack, ship

5. Singleton
- only single instance
-synchronized
- OR volatile

6. Command
7. Adapter and facade
8. Template Method
9. Iterator and Composite
10. State
11. Proxy
12. Compound
13. 




Creational:
Singleton, Builder, Prototype, Abstract factory, Factory Method
Structural : Decorator, Proxy, Composite, facade, Flyweight, Bridge, Adapter
Behavioral: templat method, Visiot, Mediator, Command, Iterator, Interpretaor, Observer, Chain of Responsibility, State, Strategy, memnto

Class and Object patterns


Maths for CS MIT course: https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-042j-mathematics-for-computer-science-fall-2010/video-lectures/

DS and Algorithms MIT course : https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011/

https://web.stanford.edu/class/cs101/index.html



LeaRNED:

1. Object and Classes : 
	- IS-A and HAS-A relationship
	- Inheritence vs Composition
	- Class having reference to another class is HAS-A/Composition
	- Class having reference to another object of same class - useful in Linked Lists
	- Its called Strategy Design Pattern - Duck problem

2. Memory and Storage
	- RAM
	- bits and bytes
	- memory is strip of bytes --> bits
	- Arrays - fixed length
	- int is 32 bits

3. LinkedLists
	-

4. Recursions - BigInteger
		- Frog Problem
		- Fibonacci
		- Factorial
5. Big-O and Time Complexity



Learning Resources:
1. LinkedIn Learning till 28th April 2019 
	- DS and Algorithms
2. Youtube - DSjo , mycode school and misc
3. Headfirst Design Patterns
4. 

**download read.zip from google drive







