Design Principles - Head First:

1. Strategy pattern  (Duck Problem): Defines a family of algorithms, encapsulates eacj one and makes them interchangeable. Strategy lets the algorithm vary independently from clients that use it.

- Favor composition over inheritence
- Program to an interface, not an implementation
- Identify aspects of application that vary and separate them from what stays the same

2. Observer Pattern : Defines a 1-to-many dependency b/w objects so that when one object changes state, all of its dependents are notified and updated automatically

Publishers+Subscribers of newpaper = Observer pattern
Publishers = Subject
Subscribers = Observers

- provides an object design where subjects and observers are loosely coupled.
- strive for loosely coupled designs between objects that interact
- Oberserver and Observable classes in Java - real life examples

start from page 61

3. Decorator
- starbuzz coffee
- decorator classes
- real life: File Input Stream --> Buffered Input STream --> LineNumberInputStream Classes (remember the diagram - page 103)

** Designs should be open for extension and closed for modification


4. Factory
- cases when there are multiple types of objects which can be created
- example : Pizza - Cheese Pizza, veggie Delight etc. Operations are same --> bake, topings, cut, pack, ship

5. Singleton
- only single instance
-synchronized
- OR volatile

6. Command
7. Adapter and facade
8. Template Method
9. Iterator and Composite
10. State
11. Proxy
12. Compound
13. 




Creational:
Singleton, Builder, Prototype, Abstract factory, Factory Method
Structural : Decorator, Proxy, Composite, facade, Flyweight, Bridge, Adapter
Behavioral: templat method, Visiot, Mediator, Command, Iterator, Interpretaor, Observer, Chain of Responsibility, State, Strategy, memnto

Class and Object patterns
